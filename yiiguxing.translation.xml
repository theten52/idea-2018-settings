<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="1005" />
    <option name="newTranslationDialogY" value="145" />
    <histories>
      <item value="advisors" />
      <item value="advices" />
      <item value="when actually in proxy mode." />
      <item value="introduce an AOP framework dependency when actually in proxy mode." />
      <item value="Inner class to just introduce an AOP framework dependency when actually in proxy mode." />
      <item value="introduce" />
      <item value="surrounding" />
      <item value="Composite Component Definition" />
      <item value="Use defaults if no transaction definition given." />
      <item value="init User Transaction And Transaction Manager" />
      <item value="BeanDefinitionRegistries are called early in application startup, before BeanFactoryPostProcessors. This means that PropertyResourceConfigurers will not have been loaded and any property substitution of this class' properties will fail. To avoid this, find any PropertyResourceConfigurers defined in the context and run them on this class' bean definition. Then update the values." />
      <item value="Let concrete implementations initialize themselves." />
      <item value="Let abstract subclasses check their configuration." />
      <item value="finish Bean Factory Initialization" />
      <item value="InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); try (SqlSession sqlSession = sqlSessionFactory.openSession()) { UserMapper mapper = sqlSession.getMapper(UserMapper.class); User user = mapper.selectUser(1); System.out.println(user); } }" />
      <item value="Public Key Retrieval is not allowed" />
      <item value="Generated Javadoc options file (useful for troubleshooting)" />
      <item value="Execution failed for task ':demo-study:javadoc'. &gt;" />
      <item value="Groovy only needs the declared dependencies (and not the result of Java compilation)" />
      <item value="immutable Values" />
      <item value="This module also builds Kotlin code and the compileKotlin task naturally depends on compileJava. We need to redefine dependencies to break task cycles." />
      <item value="When prompted exclude the spring-aspects module (or after the import via File-&gt; Project Structure -&gt; Modules)&#10;Code away" />
      <item value="Kotlin: API version 1.2 is no longer supported; please, use version 1.3 or greater." />
      <item value="IMPLIED" />
      <item value="should Generate Id As Fallback" />
      <item value="Is aware of a corresponding Connection bound to the current thread, for example when using DataSourceTransactionManager." />
      <item value="corresponding" />
      <item value="Is aware of a corresponding Connection bound to the current thread," />
      <item value="simplifying calling code and making any exception that is thrown more meaningful.&#10;" />
      <item value="delegate" />
      <item value="This method never fails, allowing to try other possible ways to use an server-agnostic weaver. This non-failure logic is required since determining a load-time weaver based on the ClassLoader name alone may legitimately fail due to other mismatches." />
      <item value="is Bean Configurer Aspect Enabled" />
      <item value="You can more easily share containers in your organization, set granular access permissions, and anonymously access public container images. Additionally, layers are shared between images across GitHub." />
      <item value="test" />
      <item value="ce" />
      <item value="Decorating Proxy" />
      <item value="optimize" />
      <item value="Objenesis Cglib Aop Proxy" />
      <item value="If the parent has the annotation and isn't abstract it's an error" />
      <item value="TODO: Consider optimization by caching the list of the aspect names" />
      <item value="Build Advisors for all AspectJ aspects in the bean factory." />
      <item value="Add all the Spring advisors found according to superclass rules." />
      <item value="Introduction Advisor" />
      <item value="eligible Advisors" />
      <item value="Runtime JAR files in the classpath have the version 1.2, which is older than the API version 1.4. Consider using the runtime of version 1.4, or pass '-api-version 1.2' explicitly to restrict the available APIs to the runtime of version 1.2. You can also pass '-language-version 1.2' instead, which will restrict not only the APIs to the specified version, but also the language features" />
      <item value="reassigned" />
      <item value="get Singleton Mutex" />
      <item value="Cannot modify startup-time collection elements anymore (for stable iteration)" />
      <item value="as it is hardly ever used by application code." />
      <item value="particularly" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1387" />
        <entry key="ENGLISH" value="1388" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="7" />
        <entry key="FRENCH" value="3" />
        <entry key="GALICIAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="ESPERANTO" value="2" />
        <entry key="ITALIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1616765004541" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200402000411101" />
      </app-key>
    </option>
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="3e88577f0b42e0b4" />
      </youdao-translate>
    </option>
  </component>
</application>