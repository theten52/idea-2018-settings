<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="1005" />
    <option name="newTranslationDialogY" value="145" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="If we're logging to a file then we don't want the console transfer listener as it will spew download progress all over the place" />
      <item value="this is the default behavior." />
      <item value="is Interactive Mode" />
      <item value="we're going to parse this back in as XML so we need to escape XML markup" />
      <item value="interpolate" />
      <item value="dominant By Id" />
      <item value="shallow Merge By Id" />
      <item value="recessive" />
      <item value="dominant" />
      <item value="validate Banned Characters" />
      <item value="get Severity" />
      <item value="ALTERNATE USER SETTINGS" />
      <item value="Our settings.xml source is historically how we have configured Maven from the CLI so we are going to have to honour its existence forever. So let's run it." />
      <item value="user Supplied Configuration Processor Count" />
      <item value="We expect at most 2 implementations to be available. The SettingsXmlConfigurationProcessor implementation is always available in the core and likely always will be, but we may have another ConfigurationProcessor present supplied by the user. The rule is that we only allow the execution of one ConfigurationProcessor. If there is more than one then we execute the one supplied by the user, otherwise we execute the the default SettingsXmlConfigurationProcessor." />
      <item value="This is not ideal but there are events specifically for configuration from the CLI which I don't believe are really valid but there are ITs which assert the right events are published so this needs to be supported so the EventSpyDispatcher needs to be put in the CliRequest so that it can be accessed by configuration processors." />
      <item value="commands" />
      <item value="event Spies" />
      <item value="Event Spy Dispatcher" />
      <item value="NOTE: To avoid inconsistencies, we'll use the TCCL exclusively for lookups" />
      <item value="discover From" />
      <item value="parse Ext Classpath" />
      <item value="informative Commands" />
      <item value="property for root logger level or System.out redirection need to be taken into account" />
      <item value="account" />
      <item value="is Ambiguous Static Logger Binder Path Set" />
      <item value="Properties containing info about the currently running version of Maven These override any corresponding properties set on the command line" />
      <item value="Needed to make this method package visible to make writing a unit test possible Maybe it's better to move some of those methods to separate class (SoC)." />
      <item value="Adding this back in for compatibility with the verifier that hard codes this option." />
      <item value="Parsing errors can happen during the processing of the arguments and we prefer not having to check if the logger is null and construct this so we can use an SLF4J logger everywhere." />
      <item value="Make sure the Maven home directory is an absolute path to save us from confusion with say drive-relative Windows paths." />
      <item value="get Canonical File" />
      <item value="initialize" />
      <item value="system Install" />
      <item value="acquire Method Accessor" />
      <item value="This is what the classloader for the main realm looks like when we boot from the command line:" />
      <item value="Associate parent realms with their children." />
      <item value="TODO return this to protected when the legacy wrappers can be removed." />
      <item value="Associate child realms to their parents." />
      <item value="Dependency Management Importer" />
      <item value="Activation" />
      <item value="source Dominant" />
      <item value="In the future" />
      <item value="set Default Close Operation" />
      <item value="Sisu will launch @EagerSingleton's on startup" />
      <item value="Sisu spots we want a map of tabs and wires it up for us" />
      <item value="auto-wires unresolved dependencies" />
      <item value="scans and binds @Named components" />
      <item value="Search methods that can be ordered by strategies to load a class" />
      <item value="TODO: Here we shall check hint to load non-default strategies" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1788" />
        <entry key="ENGLISH" value="1789" />
        <entry key="IRISH" value="1" />
        <entry key="ESTONIAN" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="7" />
        <entry key="FRENCH" value="4" />
        <entry key="FILIPINO" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="LATIN" value="3" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="ESPERANTO" value="8" />
        <entry key="ITALIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1655520008734" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200402000411101" />
      </app-key>
    </option>
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="3e88577f0b42e0b4" />
        <option name="primaryLanguage" value="ESPERANTO" />
      </youdao-translate>
    </option>
  </component>
</application>