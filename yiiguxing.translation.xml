<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="1005" />
    <option name="newTranslationDialogY" value="145" />
    <histories>
      <item value="Create proxy if we have advice." />
      <item value="Create proxy here if we have a custom TargetSource. Suppresses unnecessary default instantiation of the target bean: The TargetSource will handle target instances in a custom fashion." />
      <item value="finish Bean Factory Initialization" />
      <item value="Register bean processors that intercept bean creation." />
      <item value="apply Bean Post Processors Before Initialization" />
      <item value="Initialize the bean instance." />
      <item value="is Singleton Currently In Creation" />
      <item value="Eagerly cache singletons to be able to resolve circular references even when triggered by lifecycle interfaces like BeanFactoryAware." />
      <item value="Allow post-processors to modify the merged bean definition." />
      <item value="Don't override the class with CGLIB if no overrides." />
      <item value="Guarantee initialization of beans that the current bean depends on." />
      <item value="is Prototype Currently In Creation" />
      <item value="Temporarily return non-post-processed object, not storing it yet.." />
      <item value="Do not accept a null value for a FactoryBean that's not fully initialized yet: Many FactoryBeans just return null then." />
      <item value="already There" />
      <item value="get Singleton Mutex" />
      <item value="contains Bean Definition" />
      <item value="synthetic" />
      <item value="Now we have the bean instance, which may be a normal bean or a FactoryBean. If it's a FactoryBean, we use it to create a bean instance, unless the caller actually wants a reference to the factory." />
      <item value="which may be a normal bean or a FactoryBean." />
      <item value="Don't let calling code try to dereference the factory if the bean isn't a factory." />
      <item value="a consequence of a circular reference" />
      <item value="canonical Name" />
      <item value="compute If Absent" />
      <item value="Eagerly check singleton cache for manually registered singletons" />
      <item value="Activate" />
      <item value="get Supported Extensions" />
      <item value="cache Default Extension Name" />
      <item value="get Adaptive Extension" />
      <item value="try to load from ExtensionLoader's ClassLoader first" />
      <item value="get Adaptive Extension Class" />
      <item value="create Adaptive Extension" />
      <item value="cached Activates" />
      <item value="load Initial Drivers" />
      <item value="Balanced Clickhouse Driver" />
      <item value="is Driver Allowed" />
      <item value="Load the initial JDBC drivers by checking the System property jdbc.properties and then use the {@code ServiceLoader} mechanism" />
      <item value="Attempts to locate a driver that understands the given URL" />
      <item value="Load these drivers, so that they can be instantiated. It may be the case that the driver class may not be there i.e. there may be a packaged driver with the service class as implementation of java.sql.Driver but the actual class may be missing. In that case a java.util.ServiceConfigurationError will be thrown at runtime by the VM trying to locate and load the service. Adding a try catch block to catch those runtime errors if driver not available in classpath but it's packaged as service and that service is there in classpath." />
      <item value="If the driver is packaged as a Service Provider, load it. Get all the drivers through the classloader exposed as a java.sql.Driver.class service. ServiceLoader.load() replaces the sun.misc.Providers()" />
      <item value="occurred" />
      <item value="load Installed" />
      <item value="具体中介者" />
      <item value="excluded Exceptions" />
      <item value="My Dummy Adapter" />
      <item value="This interface is not intended for application developers. It is available to handlers who want to develop their own web workflow." />
      <item value="intended" />
      <item value="obey" />
      <item value="extensible" />
      <item value="MVC framework SPI, allowing parameterization of the core MVC workflow." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1438" />
        <entry key="ENGLISH" value="1439" />
        <entry key="ESTONIAN" value="1" />
        <entry key="GERMAN" value="7" />
        <entry key="FRENCH" value="3" />
        <entry key="GALICIAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="ESPERANTO" value="2" />
        <entry key="ITALIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1619259623287" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200402000411101" />
      </app-key>
    </option>
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="3e88577f0b42e0b4" />
      </youdao-translate>
    </option>
  </component>
</application>