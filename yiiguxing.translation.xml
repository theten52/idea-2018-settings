<application>
  <component name="AppStorage">
    <histories>
      <item value="no suitable driver" />
      <item value="If the caller does not have permission to load the driver then // skip it." />
      <item value="Walk through the loaded registeredDrivers attempting to locate someone // who understands the given URL." />
      <item value="in either of HikariConfig class loader or Thread context classloader" />
      <item value="Swallow and continue" />
      <item value="To * inject additional properties into the result you can downcast it," />
      <item value="Explicit Type" />
      <item value="prevent" />
      <item value="Authentication attempt using org.springframework.security.authentication.dao.DaoAuthenticationProvider" />
      <item value="Request is to process authentication" />
      <item value="Checking match of request : '/oauth/token'; against '/oauth/token'" />
      <item value="Returns the first filter chain matching the supplied URL." />
      <item value="Let the delegate perform the actual doFilter operation." />
      <item value="Let subclasses do whatever initialization they like." />
      <item value="specifying the name of the target bean in the Spring * application context." />
      <item value="Delegating Filter Proxy" />
      <item value="should Not Filter Async Dispatch" />
      <item value="Proceed without invoking this filter..." />
      <item value="already Filtered Attribute Name" />
      <item value="gauge Service" />
      <item value="* Filter that counts requests and measures processing times." />
      <item value="Create the filter chain for this request" />
      <item value="This // requires a recheck in second case to deal with // shutdownNow race while clearing interrupt" />
      <item value="If pool is stopping, ensure thread is interrupted;" />
      <item value="permanent" />
      <item value="is Async Started" />
      <item value="is Secure" />
      <item value="but // changing this would break backwards compatibility" />
      <item value="* This implementation checks the timestamp of the underlying File, * if available." />
      <item value="Detects the &quot;file&quot; protocol as well as the JBoss &quot;vfs&quot; protocol in URLs, * resolving file system references accordingly." />
      <item value="Detects" />
      <item value="such as {@link UrlResource} or {@link ClassPathResource}." />
      <item value="Abstract base class for resources which resolve URLs into File references," />
      <item value="This requirement is particularly important when you consider an API such as JavaMail," />
      <item value="it is &lt;i&gt;required&lt;/i&gt; * that each {@code getInputStream()} call returns a fresh stream." />
      <item value="facility" />
      <item value="implementations in order to expose their singleton management facility * in a uniform manner." />
      <item value="Interface that defines a registry for shared bean instances." />
      <item value="(as opposed to the name of an actually registered component)." />
      <item value="decorate Bean Definition If Required" />
      <item value="No archetype found in remote catalog. Defaulting to internal catalog" />
      <item value="The {@link List} that all operations are eventually delegated to." />
      <item value="Inspired by {@code LazyList} from Commons Collections." />
      <item value="allowing for elements * to be created and added to the {@link List} in a &quot;just in time&quot; fashion." />
      <item value="This is particularly * useful for data binding to {@link List Lists}," />
      <item value="Simple {@link List} wrapper class that allows for elements to be * automatically populated as they are requested." />
      <item value="Once the underlying operation has completed successfully, * the execution instance can be simply discarded." />
      <item value="* Provide a {@link BackOffExecution} that indicates the rate at which * an operation should be retried." />
      <item value="with the * listener getting invoked for matching event objects only." />
      <item value="events will be filtered accordingly," />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1165" />
        <entry key="ENGLISH" value="1166" />
        <entry key="ESTONIAN" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="13" />
        <entry key="RUSSIAN" value="3" />
        <entry key="FRENCH" value="2" />
        <entry key="CZECH" value="3" />
        <entry key="CORSICAN" value="10" />
        <entry key="CROATIAN" value="2" />
        <entry key="LATIN" value="3" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>