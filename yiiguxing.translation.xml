<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="1005" />
    <option name="newTranslationDialogY" value="145" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="session may be different from rootSession seeded in DefaultMaven explicitly seed the right session here to make sure it is used by Guice" />
      <item value="Why are we just ignoring this exception? Are exceptions are being used for flow control" />
      <item value="There's no notion of taskSegment equality." />
      <item value="TODO Optimize; or maybe just rewrite the whole way aggregating mojos are being run." />
      <item value="degree Of Concurrency" />
      <item value="Not totally sure if this is needed for anything" />
      <item value="is Aggregator" />
      <item value="get Mojo Descriptor" />
      <item value="is Goal Specification" />
      <item value="validate Activated Profiles" />
      <item value="validate Prerequisites For Non Maven Plugin Projects" />
      <item value="get Project Dependency Graph" />
      <item value="reactor Dependency Graph" />
      <item value="The projects need to be topologically after the participants have run their afterProjectsRead(session) because the participant is free to change the dependencies of a project which can potentially change the topological order of the projects, and therefore can potentially change the build order. Note that participants may affect the topological order of the projects but it is not expected that a participant will add or remove projects from the session." />
      <item value="Chained Workspace Reader" />
      <item value="Desired order of precedence for workspace readers before querying the local artifact repositories" />
      <item value="collision" />
      <item value="this is just silly, lookupList should return an empty list!" />
      <item value="seed" />
      <item value="security Dispatcher" />
      <item value="Default Repository System Session" />
      <item value="Chained Dependency Graph Transformer" />
      <item value="scope selector cannot be null" />
      <item value="Fat Artifact Traverser" />
      <item value="dep Traverser" />
      <item value="new Repository Session" />
      <item value="We enter the session scope right after the MavenSession creation and before any of the AbstractLifecycleParticipant lookups so that @SessionScoped components can be @Injected into AbstractLifecycleParticipants." />
      <item value="which may change dependencies which can, in turn, affect the build order." />
      <item value="A new topological sort is required after the execution of 9) as the AbstractLifecycleParticipants are free to mutate the MavenProject instances" />
      <item value="topological" />
      <item value="trimming" />
      <item value="Create ReactorReader with the getProjectMap( projects ). NOTE that getProjectMap(projects) is the code that checks for duplicate projects definitions in the build. Ideally this type of duplicate checking should be part of getting the reactor projects in 6). The duplicate checking is conflated with getProjectMap(projects)." />
      <item value="7) Create ProjectDependencyGraph using trimming which takes into account --projects and reactor mode. This ensures that the projects passed into the ReactorReader are only those specified." />
      <item value="Get reactor projects looking for general POM errors" />
      <item value="Validate local repository directory is accessible." />
      <item value="Setup initial properties." />
      <item value="set Use Legacy Local Repository" />
      <item value="We preserve the existing methods for builder selection which is to look for various inputs in the threading configuration. We don't have an easy way to allow a pluggable builder to provide its own configuration parameters but this is sufficient for now. Ultimately we want components like Builders to provide a way to extend the command line to accept its own configuration parameters." />
      <item value="Builder, concurrency and parallelism" />
      <item value="If we're logging to a file then we don't want the console transfer listener as it will spew download progress all over the place" />
      <item value="this is the default behavior." />
      <item value="is Interactive Mode" />
      <item value="we're going to parse this back in as XML so we need to escape XML markup" />
      <item value="interpolate" />
      <item value="dominant By Id" />
      <item value="shallow Merge By Id" />
      <item value="recessive" />
      <item value="dominant" />
      <item value="validate Banned Characters" />
      <item value="get Severity" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1839" />
        <entry key="ENGLISH" value="1840" />
        <entry key="IRISH" value="1" />
        <entry key="ESTONIAN" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="7" />
        <entry key="FRENCH" value="6" />
        <entry key="FILIPINO" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="LATIN" value="3" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="ESPERANTO" value="8" />
        <entry key="ITALIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1655520008734" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200402000411101" />
      </app-key>
    </option>
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="3e88577f0b42e0b4" />
        <option name="primaryLanguage" value="ESPERANTO" />
      </youdao-translate>
    </option>
  </component>
</application>