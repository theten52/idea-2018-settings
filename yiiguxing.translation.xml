<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="1005" />
    <option name="newTranslationDialogY" value="145" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="this is just silly, lookupList should return an empty list!" />
      <item value="seed" />
      <item value="security Dispatcher" />
      <item value="Default Repository System Session" />
      <item value="Chained Dependency Graph Transformer" />
      <item value="scope selector cannot be null" />
      <item value="Fat Artifact Traverser" />
      <item value="dep Traverser" />
      <item value="new Repository Session" />
      <item value="We enter the session scope right after the MavenSession creation and before any of the AbstractLifecycleParticipant lookups so that @SessionScoped components can be @Injected into AbstractLifecycleParticipants." />
      <item value="which may change dependencies which can, in turn, affect the build order." />
      <item value="A new topological sort is required after the execution of 9) as the AbstractLifecycleParticipants are free to mutate the MavenProject instances" />
      <item value="topological" />
      <item value="trimming" />
      <item value="Create ReactorReader with the getProjectMap( projects ). NOTE that getProjectMap(projects) is the code that checks for duplicate projects definitions in the build. Ideally this type of duplicate checking should be part of getting the reactor projects in 6). The duplicate checking is conflated with getProjectMap(projects)." />
      <item value="7) Create ProjectDependencyGraph using trimming which takes into account --projects and reactor mode. This ensures that the projects passed into the ReactorReader are only those specified." />
      <item value="Get reactor projects looking for general POM errors" />
      <item value="Validate local repository directory is accessible." />
      <item value="Setup initial properties." />
      <item value="set Use Legacy Local Repository" />
      <item value="We preserve the existing methods for builder selection which is to look for various inputs in the threading configuration. We don't have an easy way to allow a pluggable builder to provide its own configuration parameters but this is sufficient for now. Ultimately we want components like Builders to provide a way to extend the command line to accept its own configuration parameters." />
      <item value="Builder, concurrency and parallelism" />
      <item value="If we're logging to a file then we don't want the console transfer listener as it will spew download progress all over the place" />
      <item value="this is the default behavior." />
      <item value="is Interactive Mode" />
      <item value="we're going to parse this back in as XML so we need to escape XML markup" />
      <item value="interpolate" />
      <item value="dominant By Id" />
      <item value="shallow Merge By Id" />
      <item value="recessive" />
      <item value="dominant" />
      <item value="validate Banned Characters" />
      <item value="get Severity" />
      <item value="ALTERNATE USER SETTINGS" />
      <item value="Our settings.xml source is historically how we have configured Maven from the CLI so we are going to have to honour its existence forever. So let's run it." />
      <item value="user Supplied Configuration Processor Count" />
      <item value="We expect at most 2 implementations to be available. The SettingsXmlConfigurationProcessor implementation is always available in the core and likely always will be, but we may have another ConfigurationProcessor present supplied by the user. The rule is that we only allow the execution of one ConfigurationProcessor. If there is more than one then we execute the one supplied by the user, otherwise we execute the the default SettingsXmlConfigurationProcessor." />
      <item value="This is not ideal but there are events specifically for configuration from the CLI which I don't believe are really valid but there are ITs which assert the right events are published so this needs to be supported so the EventSpyDispatcher needs to be put in the CliRequest so that it can be accessed by configuration processors." />
      <item value="commands" />
      <item value="event Spies" />
      <item value="Event Spy Dispatcher" />
      <item value="NOTE: To avoid inconsistencies, we'll use the TCCL exclusively for lookups" />
      <item value="discover From" />
      <item value="parse Ext Classpath" />
      <item value="informative Commands" />
      <item value="property for root logger level or System.out redirection need to be taken into account" />
      <item value="account" />
      <item value="is Ambiguous Static Logger Binder Path Set" />
      <item value="Properties containing info about the currently running version of Maven These override any corresponding properties set on the command line" />
      <item value="Needed to make this method package visible to make writing a unit test possible Maybe it's better to move some of those methods to separate class (SoC)." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1815" />
        <entry key="ENGLISH" value="1816" />
        <entry key="IRISH" value="1" />
        <entry key="ESTONIAN" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="7" />
        <entry key="FRENCH" value="6" />
        <entry key="FILIPINO" value="1" />
        <entry key="GALICIAN" value="1" />
        <entry key="LATIN" value="3" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="ESPERANTO" value="8" />
        <entry key="ITALIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1655520008734" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200402000411101" />
      </app-key>
    </option>
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="3e88577f0b42e0b4" />
        <option name="primaryLanguage" value="ESPERANTO" />
      </youdao-translate>
    </option>
  </component>
</application>