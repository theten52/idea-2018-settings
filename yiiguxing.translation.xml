<application>
  <component name="AppStorage">
    <histories>
      <item value="varying in exclusive/shared and * control modes." />
      <item value="Various flavors of acquire" />
      <item value="Main exported methods" />
      <item value="try Release Shared" />
      <item value="is Held Exclusively" />
      <item value="* CAS head field. Used only by enq." />
      <item value="And while we * are at it, we do the same for other CASable fields (which could * otherwise be done with atomic field updaters)." />
      <item value="So, as the lesser of evils, we * natively implement using hotspot intrinsics API." />
      <item value="we * natively implement using hotspot intrinsics API." />
      <item value="So, as the lesser of evils," />
      <item value="efficient" />
      <item value="which would be * efficient and useful otherwise." />
      <item value="we * cannot explicitly subclass AtomicInteger," />
      <item value="For the sake of permitting future enhancements," />
      <item value="We need to natively implement * this here:" />
      <item value="Setup to support compareAndSet" />
      <item value="intrinsics" />
      <item value="See below for intrinsics setup to support this" />
      <item value="his method does not otherwise impose any synchronization or * {@code volatile} field accesses." />
      <item value="The current owner of exclusive mode synchronization." />
      <item value="mpty constructor for use by subclasses." />
      <item value="A synchronizer that may be exclusively owned by a thread. This class provides a basis for creating locks and related synchronizers that may entail a notion of ownership. The AbstractOwnableSynchronizer class itself does not manage or use this information. However, subclasses and tools may use appropriately maintained values to help control and monitor access and provide diagnostics." />
      <item value="dialect" />
      <item value="This annotation specifies that the property or field is not persistent. It is used to annotate a property or field of an entity class, mapped superclass, or embeddable class." />
      <item value="The correctness of this depends on head being initialized // before tail and on head.next being accurate if the current // thread is first in queue." />
      <item value="correctness" />
      <item value="has Queued Predecessors" />
      <item value="Fair version of tryAcquire. Don't grant access unless * recursive call or no waiters or is first." />
      <item value="exclusive Count" />
      <item value="exclusive Owner Thread" />
      <item value="* The current owner of exclusive mode synchronization." />
      <item value="has Original Request And Response" />
      <item value="Sentinel Holder" />
      <item value="Native code saves some indication of the stack backtrace in this slot." />
      <item value="Ambiguous handler methods mapped for HTTP path" />
      <item value="retrieve And Update" />
      <item value="mutex" />
      <item value="get Expired Flash Maps" />
      <item value="This is most commonly needed when redirecting from one URL * to another --" />
      <item value="A FlashMap provides a way for one request to store attributes intended for * use in another." />
      <item value="input Flash Map" />
      <item value="render" />
      <item value="Uses configured default cacheSeconds setting." />
      <item value="Determine handler for the current request." />
      <item value="Determine" />
      <item value="to be able to restore the original attributes after the include." />
      <item value="an include," />
      <item value="Make framework objects available to handlers and view objects." />
      <item value="THEME RESOLVER BEAN NAME" />
      <item value="Filter candidates using a given custom" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1056" />
        <entry key="ENGLISH" value="1057" />
        <entry key="ESTONIAN" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="13" />
        <entry key="RUSSIAN" value="3" />
        <entry key="FRENCH" value="2" />
        <entry key="CZECH" value="3" />
        <entry key="CORSICAN" value="10" />
        <entry key="CROATIAN" value="2" />
        <entry key="LATIN" value="3" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>