<application>
  <component name="AppStorage">
    <histories>
      <item value="Master-slave Separation Plugin with mybatis" />
      <item value="// we'll check in the synchronized section again (to prevent unnecessary reinitialization)" />
      <item value="Binds the JNDI DataSource to proxy." />
      <item value="on project level (rather than compileJava one) as sonarqube respects these" />
      <item value="determine Data Source" />
      <item value="This just serves as a hint for the actual transaction subsystem;" />
      <item value="hint" />
      <item value="allowing for corresponding optimizations at runtime." />
      <item value="corresponding optimizations at runtime." />
      <item value="corresponding" />
      <item value="allowing for" />
      <item value="if the transaction is * effectively read-only" />
      <item value="effectively" />
      <item value="propagation" />
      <item value="Actually performs" />
      <item value="well Known Simple Prefixes" />
      <item value="Recursive invocation, parsing placeholders contained in the // previously resolved placeholder value." />
      <item value="Recursive invocation, parsing placeholders contained in the placeholder key." />
      <item value="ignore Unresolvable Placeholders" />
      <item value="is Assignable From" />
      <item value="issue #510 Collections &amp; arrays support" />
      <item value="extract Row Bounds" />
      <item value="// Popular vote was to return null on 0 results and throw exception on too many." />
      <item value="Popular vote" />
      <item value="vote" />
      <item value="Strict Map" />
      <item value=", prior to throwing * the" />
      <item value="relinquish" />
      <item value="relinquish the underlying resources" />
      <item value="It is strongly advised * to relinquish the underlying resources and to" />
      <item value="As noted in" />
      <item value="cases where the * close may fail require careful attention." />
      <item value="associated" />
      <item value="a source or destination of data" />
      <item value="the number of permits acquired" />
      <item value="Acquires and returns all permits that are immediately available." />
      <item value="drain Permits" />
      <item value="not without hurting performance too much." />
      <item value="varying in exclusive/shared and * control modes." />
      <item value="Various flavors of acquire" />
      <item value="Main exported methods" />
      <item value="try Release Shared" />
      <item value="is Held Exclusively" />
      <item value="* CAS head field. Used only by enq." />
      <item value="And while we * are at it, we do the same for other CASable fields (which could * otherwise be done with atomic field updaters)." />
      <item value="So, as the lesser of evils, we * natively implement using hotspot intrinsics API." />
      <item value="we * natively implement using hotspot intrinsics API." />
      <item value="So, as the lesser of evils," />
      <item value="efficient" />
      <item value="which would be * efficient and useful otherwise." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1095" />
        <entry key="ENGLISH" value="1096" />
        <entry key="ESTONIAN" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="13" />
        <entry key="RUSSIAN" value="3" />
        <entry key="FRENCH" value="2" />
        <entry key="CZECH" value="3" />
        <entry key="CORSICAN" value="10" />
        <entry key="CROATIAN" value="2" />
        <entry key="LATIN" value="3" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>