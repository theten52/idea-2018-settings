<application>
  <component name="AppStorage">
    <histories>
      <item value="ignore Unresolvable Placeholders" />
      <item value="is Assignable From" />
      <item value="issue #510 Collections &amp; arrays support" />
      <item value="extract Row Bounds" />
      <item value="// Popular vote was to return null on 0 results and throw exception on too many." />
      <item value="Popular vote" />
      <item value="vote" />
      <item value="Strict Map" />
      <item value=", prior to throwing * the" />
      <item value="relinquish" />
      <item value="relinquish the underlying resources" />
      <item value="It is strongly advised * to relinquish the underlying resources and to" />
      <item value="As noted in" />
      <item value="cases where the * close may fail require careful attention." />
      <item value="associated" />
      <item value="a source or destination of data" />
      <item value="the number of permits acquired" />
      <item value="Acquires and returns all permits that are immediately available." />
      <item value="drain Permits" />
      <item value="not without hurting performance too much." />
      <item value="varying in exclusive/shared and * control modes." />
      <item value="Various flavors of acquire" />
      <item value="Main exported methods" />
      <item value="try Release Shared" />
      <item value="is Held Exclusively" />
      <item value="* CAS head field. Used only by enq." />
      <item value="And while we * are at it, we do the same for other CASable fields (which could * otherwise be done with atomic field updaters)." />
      <item value="So, as the lesser of evils, we * natively implement using hotspot intrinsics API." />
      <item value="we * natively implement using hotspot intrinsics API." />
      <item value="So, as the lesser of evils," />
      <item value="efficient" />
      <item value="which would be * efficient and useful otherwise." />
      <item value="we * cannot explicitly subclass AtomicInteger," />
      <item value="For the sake of permitting future enhancements," />
      <item value="We need to natively implement * this here:" />
      <item value="Setup to support compareAndSet" />
      <item value="intrinsics" />
      <item value="See below for intrinsics setup to support this" />
      <item value="his method does not otherwise impose any synchronization or * {@code volatile} field accesses." />
      <item value="The current owner of exclusive mode synchronization." />
      <item value="mpty constructor for use by subclasses." />
      <item value="A synchronizer that may be exclusively owned by a thread. This class provides a basis for creating locks and related synchronizers that may entail a notion of ownership. The AbstractOwnableSynchronizer class itself does not manage or use this information. However, subclasses and tools may use appropriately maintained values to help control and monitor access and provide diagnostics." />
      <item value="dialect" />
      <item value="This annotation specifies that the property or field is not persistent. It is used to annotate a property or field of an entity class, mapped superclass, or embeddable class." />
      <item value="The correctness of this depends on head being initialized // before tail and on head.next being accurate if the current // thread is first in queue." />
      <item value="correctness" />
      <item value="has Queued Predecessors" />
      <item value="Fair version of tryAcquire. Don't grant access unless * recursive call or no waiters or is first." />
      <item value="exclusive Count" />
      <item value="exclusive Owner Thread" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1076" />
        <entry key="ENGLISH" value="1077" />
        <entry key="ESTONIAN" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="13" />
        <entry key="RUSSIAN" value="3" />
        <entry key="FRENCH" value="2" />
        <entry key="CZECH" value="3" />
        <entry key="CORSICAN" value="10" />
        <entry key="CROATIAN" value="2" />
        <entry key="LATIN" value="3" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>